<script>
  $(function() {
    var isOrcid = function(value) {
      // Notice that we allow for an "X" as the last digit.
      // Source https://gist.github.com/asencis/644f174855899b873131c2cabcebeb87
      return /^(\d{4}-){3}\d{3}(\d|X)$/.test(value)
    };

    var incrementCounter = function(elementId) {
      var counter = parseInt($(elementId)[0].value, 10);
      counter++
      $(elementId)[0].value = counter
      return counter
    }

    var addCreatorHtml = function(num, orcid, givenName, familyName, sequence) {
      var rowId = `creator_row_${num}`;
      var orcidId = `orcid_${num}`;
      var givenNameId = `given_name_${num}`;
      var familyNameId = `family_name_${num}`;
      var sequenceId = `sequence_${num}`;
      var rowHtml = `<tr id="${rowId}" class="creators-table-row">
        <td>
          <input class="orcid-entry" type="text" id="${orcidId}" name="${orcidId}" value="${orcid}" data-num="${num}" placeholder="0000-0000-0000-0000" />
        </td>
        <td>
          <input type="text" id="${givenNameId}" name="${givenNameId}" value="${givenName}" />
        </td>
        <td class="creators-table-row-family-name">
          <input type="text" id="${familyNameId}" name="${familyNameId}" value="${familyName}" />
        </td>
        <td>
          <input class="sequence hidden" type="text" id="${sequenceId}" name="${sequenceId}" value="${sequence}" />
        </td>
        <td>
          <i class="bi bi-arrow-down-up" style="color: gray;" title="Click and drag to reorder"></i>
        </td>
        <td>
          <span>
            <a class="delete-creator" data-creator-num="${num}" href="#" title="Remove this creator">
              <i class="bi bi-trash delete_icon" data-creator-num="${num}"></i>
            </a>
          </span>
        </td>
      </tr>`;
      $("#creators-table").append(rowHtml);
      $("#" + orcidId).focus();
    }

    var deleteCreator = function(num) {
      var rowToDelete = `#creator_row_${num}`;
      var rowExists = $(rowToDelete).length > 0;
      var orcidId = `#orcid_${num}`;
      var givenNameId = `#given_name_${num}`;
      var familyNameId = `#family_name_${num}`;
      var name = $(orcidId).val() + " " + $(givenNameId).val() + " " + $(familyNameId).val();
      var emptyName = (name.trim().length == 0);
      if (rowExists) {
        if (emptyName) {
          // delete it without asking
          $(rowToDelete).remove();
        } else {
          if (confirm(`Remove creator ${name}`)) {
            $(rowToDelete).remove();
          }
        }
      }
    }

    // Updates the creators sequence value to match the order
    // in which they are displayed. This is needed if the user
    // reordered the creators (via drag and drop).
    var updateCreatorsSequence = function() {
      var i;
      var sequences = $(".creators-table-row > td > input.sequence")
      for(i = 0; i < sequences.length; i++) {
        sequences[i].value = i + 1;
      }
    }

    var addTitlePlaceholder = function(_el) {
      var newTitleCount = incrementCounter("#new_title_count");
      var titleId = `new_title_${newTitleCount}`;
      var typeId = `new_title_type_${newTitleCount}`;
      var html = `
        <div class="field">
          <select id="${typeId}" name="${typeId}">
            <option value="AlternativeTitle">Alternative</option>
            <option value="Subtitle">Subtitle</option>
            <option value="TranslatedTitle">Translated</option>
            <option value="Other">Other</option>
          </select>
          <br>
          <input type="text" id="${titleId}" name="${titleId}" value="" />
        </div>`;
      $("#new-titles-anchor").append(html);
    }

    var sortedCreators = function() {
      var i, el, creator;
      var creatorSpans = $(".creator-data");
      var creators = [];
      for(i = 0; i < creatorSpans.length; i++) {
        el = $(creatorSpans[i]);
        creator = {
          num: el.data("num"),
          orcid: el.data("orcid"),
          givenName: el.data("given-name"),
          familyName: el.data("family-name"),
          sequence: el.data("sequence")
        }
        creators.push(creator);
      }
      creators.sort(function(a, b) { return a.sequence - b.sequence});
      return creators;
    }

    // Returns true if the "user entered" textboxes for the row are empty.
    var isEmptyRow = function(rowId) {
      var selector, textboxes, i, textboxId, value;
      selector = `#${rowId} > td > input`;
      textboxes = $(selector);
      for(i = 0; i < textboxes.length; i++) {
        textboxId = textboxes[i].id;
        if (textboxId.startsWith("orcid_") || textboxId.startsWith("given_name_") || textboxId.startsWith("family_name_")) {
          value = $("#" + textboxId).val().trim();
          if (value!= "") {
            return false;
          };
        }
      }
      return true;
    }

    // Returns the ID of the first row that has an empty creator (if any)
    var findEmptyCreator = function() {
      var i;
      var rows = $(".creators-table-row");
      for(i = 0; i < rows.length; i++) {
        if (isEmptyRow(rows[i].id)) {
          return rows[i].id;
        }
      };
      return null;
    }

    // Sets the values of a creator given a rowId
    var setCreatorValues = function(rowId, orcid, givenName, familyName) {
      var suffix = rowId.replace("creator_row_", "");
      $("#orcid_" + suffix).val(orcid);
      $("#given_name_" + suffix).val(givenName);
      $("#family_name_" + suffix).val(familyName);
    }

    $("#btn-add-creator").on("click", function(el) {
      var num = incrementCounter("#creator_count");
      addCreatorHtml(num, "", "", "");
      return false;
    });

    $("#btn-add-me-creator").on("click", function(el) {
      var num = incrementCounter("#creator_count");
      var orcid = $("#user_orcid").val()
      var givenName = $("#user_given_name").val()
      var familyName = $("#user_family_name").val()
      var emptyRowId = findEmptyCreator();
      if (emptyRowId == null) {
        addCreatorHtml(num, orcid, givenName, familyName);
      } else {
        setCreatorValues(emptyRowId, orcid, givenName, familyName)
      }
      return false;
    });

    $("#btn-add-title").on("click", function(el) {
      addTitlePlaceholder(el);
      return false;
    });

    $("#btn-submit").on("click", function(el) {
      updateCreatorsSequence();
    });

    // Delete button for creators.
    //
    // Notice the use of $(document).on("click", selector, ...) instead of the
    // typical $(selector).on("click", ...). This syntax is required so that
    // we can detect the click even on HTML elements _added on the fly_ which
    // is the case when a user adds a new creator.
    // Reference: https://stackoverflow.com/a/17086311/446681
    $(document).on("click", ".delete-creator", function(el) {
      var num = $(el.target).data("creator-num");
      deleteCreator(num);
      return false;
    });

    if ($(".creator-data").length ==0) {
      // Add an empty creator for the use to fill it out
      var num = incrementCounter("#creator_count");
      addCreatorHtml(num, "", "", "");
    } else {
      // Adds the existing creators making sure we honor the ordering.
      var creators = sortedCreators();
      for(i = 0; i < creators.length; i++) {
        var creator = creators[i];
        addCreatorHtml(creator.num, creator.orcid, creator.givenName, creator.familyName, creator.sequence);
      }
    }

    // Fetch name information for a given ORCID via ORCID's public API
    $(document).on("input", ".orcid-entry", function(el) {
      var num = el.target.attributes["data-num"].value;
      var orcid = $(el.target).val().trim();
      if (isOrcid(orcid)) {
        $.ajax({
          url: `<%= ORCID_URL %>/${orcid}`,
          dataType: 'jsonp'
        })
        .done(function(data) {
          var givenName = data.person.name["given-names"].value;
          var familyName = data.person.name["family-name"].value;
          var givenNameId = `#given_name_${num}`;
          var familyNameId = `#family_name_${num}`;
          $(givenNameId).val(givenName);
          $(familyNameId).val(familyName);
        })
        .fail(function(XMLHttpRequest, textStatus, errorThrown) {
          console.log(`Error fetching ORCID for ${errorThrown}`);
        });
      }
    });

    // Allows the creators to be reordered via drag and drop.
    // The `cancel` property "prevents sorting if you start on elements matching the selector"
    // https://api.jqueryui.com/sortable/#method-cancel
    //
    //  tr:has(th)      - prevents reordering the header (https://stackoverflow.com/a/17897706/446681)
    //  input           - prevents reordering on the textboxes (so they are still editable)
    //  .delete-creator - prevents reording on the delete icon
    //
    $("#creators-table-sortable").sortable({
      cancel: "tr:has(th), input, .delete-creator"
    });
  });
</script>

# frozen_string_literal: true
require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/work_activity_notifications", type: :request do
  # WorkActivityNotification. As you add validations to WorkActivityNotification, be sure to
  # adjust the attributes here as well.
  let(:user) { FactoryBot.create :user }
  let(:work_activity) { FactoryBot.create(:work_activity, created_by_user_id: user.id, activity_type: WorkActivity::NOTIFICATION) }
  let(:valid_attributes) do
    {
      work_activity: work_activity,
      user: user
    }
  end

  before do
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      WorkActivityNotification.create! valid_attributes
      get work_activity_notifications_url
      expect(response).to be_successful
      expect(response.body).to include(work_activity.work.title)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      work_activity_notification = WorkActivityNotification.create! valid_attributes
      get work_activity_notification_url(work_activity_notification)
      expect(response).to be_successful
      expect(response.body).to include(work_activity.work.title)
    end
  end
end

# frozen_string_literal: true
require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/activity_notifications", type: :request do
  # ActivityNotification. As you add validations to ActivityNotification, be sure to
  # adjust the attributes here as well.
  let(:work_activity) { FactoryBot.create :work_activity }
  let(:user) { work_activity.created_by_user }
  let(:work_activity_notification) { WorkActivityNotification.create(work_activity_id: work_activity.id, user_id: user.id) }

  describe "GET /index" do
    it "renders a unsuccessful response when no user is signed in" do
      work_activity_notification
      get work_activity_notifications_path
      expect(response).not_to be_successful
    end

    context "when a user is signed in" do
      before do
        sign_in user
      end

      it "renders a successful response" do
        work_activity_notification
        get work_activity_notifications_path
        expect(response).to be_successful
      end
    end
  end

  describe "GET /show" do
    it "renders a unsuccessful response when no user is signed in" do
      get work_activity_notification_path(work_activity_notification)
      expect(response).not_to be_successful
    end

    context "when a user is signed in" do
      before do
        sign_in user
      end

      it "renders a successful response" do
        get work_activity_notification_path(work_activity_notification)
        expect(response).to be_successful
      end
    end
  end
end
